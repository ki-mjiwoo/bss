package kr.or.ddit.mail.controller;

import java.security.Principal;
import java.util.List;

import javax.inject.Inject;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.employee.vo.EmployeeVOWrapper;
import kr.or.ddit.mail.dao.MailBoxDAO;
import kr.or.ddit.mail.service.mailBoxService;
import kr.or.ddit.mail.vo.MailBoxVO;
import kr.or.ddit.pagingVO.PaginationInfo;
import kr.or.ddit.pagingVO.SimpleCondition;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Controller
@RequestMapping("/mail/")
public class MailBoxRetriveController {
	private final mailBoxService service;

	/**
	 * 메일함 첫화면
	 * 
	 * @return
	 */
	@RequestMapping("allMail.do")
	public String allMailList(
			Model model
			, Principal principal
			, @RequestParam(name = "page", required = false, defaultValue = "1") long currentPage
			, @ModelAttribute("simpleCondition") SimpleCondition simpleCondition) {
		PaginationInfo<MailBoxVO> paging = new PaginationInfo<MailBoxVO>();
		
		paging.setCurrentPage(currentPage);
		paging.setSimpleCondition(simpleCondition);
		
		String empId = principal.getName();

		String logicalViewName = service.recieveMailList(empId, paging);
		List<MailBoxVO> recieveMailList = service.retriveGetMailList(empId, paging);
		model.addAttribute("recieveMailList", recieveMailList);

		return logicalViewName;
	}

	/**
	 * 받은메일함
	 * 
	 * @return
	 */
	@RequestMapping("receiveList.do")
	public String recieveList(Model model, Principal principal,
			@RequestParam(name = "page", required = false, defaultValue = "1") long currentPage,
			@ModelAttribute("simpleCondition") SimpleCondition simpleCondition) {
		PaginationInfo<MailBoxVO> paging = new PaginationInfo<MailBoxVO>();
		paging.setCurrentPage(currentPage);
		paging.setSimpleCondition(simpleCondition);

		String empId = principal.getName();

		List<MailBoxVO> recieveMailList = service.retriveGetMailList(empId, paging);
		paging.setDataList(recieveMailList);

		model.addAttribute("recieveMailList", recieveMailList);

		return "mail/receive/receiveList";
	}

	/**
	 * 보낸 메일함 상세조회
	 * 
	 * @return
	 */
	@RequestMapping("sendView.do")
	public String sendView(@RequestParam(name = "mailNo", required = true) String mailNo, Model model) {
		MailBoxVO mail = service.retriveMailDetail(mailNo);

		model.addAttribute("mail", mail);

		return "mail/allMail/mailDetail";
	}

	@RequestMapping("receiveView.do")
	public String reciveView(@RequestParam(name = "mailNo", required = true) String mailNo, Model model) {
		MailBoxVO mail = service.retriveMailDetail(mailNo);

		model.addAttribute("mail", mail);

		return "mail/allMail/mailDetail";
	}

	/**
	 * 내게쓴 메일함
	 * 
	 * @return
	 */
	@RequestMapping("tomeList.do")
	public String tomeList() {
		return "mail/tome/tomeList";
	}

	/**
	 * 보낸 메일함
	 * 
	 * @return
	 */
	@RequestMapping("sendList.do")
	public String sendList(Model model, Principal principal) {
		String empId = principal.getName();
		List<MailBoxVO> sendMailList = service.retriveSendMailList(empId);
		model.addAttribute("sendMailList", sendMailList);

		return "mail/send/sendList";
	}

	/**
	 * 임시보관함
	 * 
	 * @return
	 */
	@RequestMapping("tempList.do")
	public String tempList() {
		return "mail/temp/tempList";
	}

	/**
	 * 중요메일함
	 * 
	 * @return
	 */
	@RequestMapping("impoList.do")
	public String impoList() {
		return "mail/impo/impoList";
	}

	/**
	 * 휴지통
	 * 
	 * @return
	 */
	@RequestMapping("wasteList.do")
	public String wasteList() {
		return "mail/waste/wasteList";
	}

	/**
	 * 메일쓰기 폼
	 * 
	 * @return
	 */
	@GetMapping("sendMail.do")
	public String sendMailForm(Model model, Authentication authentication) {
		EmployeeVOWrapper wrapper = (EmployeeVOWrapper) authentication.getPrincipal();
		String empMail = wrapper.getRealUser().getEmpMail();
		model.addAttribute("empMail", empMail);

		return "mail/send/sendForm";
	}
	
	@PostMapping("storage.do	")
	public String storageMail() {
		return null;
	}

//	@RequestMapping("/mypage")
//	public String Mypage(Authentication authentication) {  
//		String username= authentication.getName();
//		EmployeeVOWrapper wrapper= (EmployeeVOWrapper) authentication.getPrincipal();
//		wrapper.getRealUser().getEmpMail();
//		return "member/mypage";
//	}

	@PostMapping("sendMail.do")
	public String sendMail(@ModelAttribute("mail") MailBoxVO mail, Errors errors, Model model,
			Authentication authentication) {
		String logicalViewName = null;
		boolean result = true;
		String empCd = authentication.getName();
		model.addAttribute("empCd", empCd);

		if (!errors.hasErrors()) {
			result = service.sendMail(mail, empCd);

			if (result == true) {
				logicalViewName = "mail/allMail/allMail";
			} else {
				model.addAttribute("message", "잘못된 이메일 입니다");
				logicalViewName = "mail/send/sendForm";
			}
		} else {
			logicalViewName = "mail/send/sendForm";
		}

		return logicalViewName;
	}
}
