package kr.or.ddit.messenger.controller;

import java.util.List;

import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.employee.service.EmployeeService;
import kr.or.ddit.employee.vo.EmployeeVO;
import kr.or.ddit.employee.vo.EmployeeVOWrapper;
import kr.or.ddit.mail.vo.MailBoxVO;
import kr.or.ddit.messenger.service.ChatRoomService;
import kr.or.ddit.messenger.vo.ChatRoomVO;
import kr.or.ddit.pagingVO.PaginationInfo;
import kr.or.ddit.pagingVO.SimpleCondition;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Controller
@RequestMapping("chatRoom")
public class ChatRoomController {
	private final ChatRoomService service;
	private final EmployeeService employeeService;
	
	@RequestMapping("chatRoom.do")
	public String chatRoomList(
			Model model
			, Authentication authentication
			) {
		EmployeeVOWrapper wrapper = (EmployeeVOWrapper) authentication.getPrincipal();
		EmployeeVO employee= wrapper.getRealUser();
		String empCd = employee.getEmpCd();
		String empName = employee.getEmpName();
		
		ChatRoomVO chatRoom = new ChatRoomVO();
		chatRoom.setEmpCd(empCd);
		
		List<ChatRoomVO> chatRoomList = service.retrieveChatRoomList(empCd);
		model.addAttribute("chatRoomList", chatRoomList);
		model.addAttribute("empName", empName);
		
		return "chat/temp/chatRoomList";
	}
	
	@RequestMapping("chatRoomCreate.do")
	public String chatRoomCreate(
	        Model model,
	        @RequestParam(name = "roomType") String roomType,
	        @RequestParam(name = "roomName") String roomName
	        , Authentication authentication
	) {
		EmployeeVOWrapper wrapper = (EmployeeVOWrapper) authentication.getPrincipal();
		EmployeeVO employee= wrapper.getRealUser();
		String empCd = employee.getEmpCd();
		
		String logicalViewName = null;
		
	    if ("keepRoom".equals(roomType)) {
	        service.createChatRoom(empCd);
	    } else if ("onceRoom".equals(roomType)) {
	        
	    } else {
	        
	    }
	    
	    return "chat/temp/chatRoomCreate";
	}
	
	@RequestMapping("inviteEmpList.do")
	public String inviteEmpList(
			Model model
			, @RequestParam(name = "page", required = false, defaultValue = "1") long currentPage
			, @ModelAttribute("simpleCondition") SimpleCondition simpleCondition
			) {
		PaginationInfo<EmployeeVO> paging = new PaginationInfo<>();
		paging.setCurrentPage(currentPage);
		paging.setSimpleCondition(simpleCondition);
		
		List<EmployeeVO> empList = employeeService.empListNotPaging(paging);
		paging.setDataList(empList);
		model.addAttribute("empList", empList);
		
		return "chat/temp/inviteEmpList";
	}
	
	@RequestMapping("chatRoomInviteEmp.do")
	public String chatRoomInviteEmp(
			Model model
			, @RequestParam("empCds") String empCds
			, Authentication authentication
			) {
		EmployeeVOWrapper wrapper = (EmployeeVOWrapper) authentication.getPrincipal();
		EmployeeVO employee= wrapper.getRealUser();
		String empCd = employee.getEmpCd();
		String empName = employee.getEmpName();
		
		String[] empCdArray = empCds.split(",");
		ChatRoomVO chatRoom = new ChatRoomVO();
		
		for(String empListCd : empCdArray) {
			chatRoom.setEmpCd(empListCd);
			//service.createChatRoom(chatRoom);
		}
		
		List<ChatRoomVO> chatRoomList = service.retrieveChatRoomList(empCd);
		model.addAttribute("chatRoomList", chatRoomList);
		model.addAttribute("empName", empName);
		
		return "chat/temp/chatRoomList";
	}
}
